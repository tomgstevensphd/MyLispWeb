;;**********************  H-SOAP.lisp *************************


;;FROM http://www.w3.org/TR/xmlp-scenarios/#S4
#|
2. DOCUMENTATION OF USAGE SCENARIOS

2.1 S1 FIRE-AND-FORGET TO SINGLE RECEIVER

2.1.1 Scenario Definition

A sender wishes to send an unacknowledged message to a single receiver (e.g. send a stock price update every 15 minutes).

2.1.2 Description

Figure 1 Fire-and-forget to single receiver
A fire-and-forget feature in scenario S1 requires a mechanism to send a message to a single SOAP Receiver and is illustrated in Figure 1. The SOAP Sender does not require any status information that the message has been sent to or received by the recipient. The underlying transport protocol may implement a response mechanism, but status on whether the message was successfully sent or otherwise is not returned to the sending SOAP Processor.

Example 1: Fire-and-forget SOAP message
<?xml version="1.0" ?>
<env:Envelope xmlns:env="http://www.w3.org/2001/09/soap-envelope">
  <env:Body>        
    <r:StockPriceUpdate xmlns:r="http://example.org/2001/06/quotes">
      <r:Symbol>BigCo</r:Symbol>
      <r:Price>34.5</r:Price>
    </r:StockPriceUpdate>
  </env:Body>
</env:Envelope>
2.2 S2 Fire-and-forget to multiple receivers

2.2.1 Scenario Definition

A sender wishes to send unacknowledged messages to a set of receivers (e.g. send a stock price update every 15 minutes).

2.2.2 Description

Figure 2 Fire-and-forget to multiple receivers 
Scenario S2 extends S1 to implement a fire-and-forget feature to multiple SOAP Receivers and is illustrated in Figure 2. This requires a mechanism to deliver the same message to multiple SOAP Receivers. The delivery of the messages could be implemented using multicast distribution technology if the underlying transport layer supports this. An alternative implementation may use repeated applications of scenario S1 with a distribution list of intended recipients.

;;XXX
2.3 S3 REQUEST/RESPONSE

2.3.1 Scenario Definition

Two parties wish to conduct electronic business by the EXCHANGE OF BUSINESS DOCUMENTS. The SENDING party PACKAGES ONE OR MORE DOCUMENTS INTO A REQUEST MESSAGE, which is then sent to the receiving party. The RECEIVING party then PROCESSES THE MESSAGE CONTENTs and RESPONDS to the sending party. Examples of the sending party's documents may be purchase order requests, manufacturing information and patient healthcare information. Examples of the receiving party's responses may include order confirmations, change control information and contractual acknowledgements.

2.3.2 Description

Scenario S3 REQUIRES A REQUEST/RESPONSE MESSAGE FEATURE. A request containing some business document is sent by a SOAP Sender to a SOAP Receiver where some business APPLICATION IS INVOKED. The business application processes the request and GENERATES A RESPONSE, which is RETURNED TO THE SOAP SENDER THAT ORIGINATED THE REQUEST. 
Two alternative solutions are described which DEPEND UPON THE CHARACTERISTICS OF THE UNDERLYING TRANSPORT LAYER. In either case, the SOAP Sender is informed of the status (successful or otherwise) of the request message delivery.

Figure 3 Request/Response using underlying transport
If the underlying transport protocol SUPPORTS THE CORRELATION OF A REQUEST AND ITS MATCHING RESPONSE DIRECTLY, then the solution illustrated in Figure 3 may be appropriate. 
An example of such an underlying transport protocol would be a SYNCHRONOUS HTTP POST. This implementation would make use of the transport binding proposed in other XML Protocol WG documents. 
1.The business document sent as a request by the SOAP Sender would be INSERTED AS THE PAYLOAD OF THE REQUEST MESSAGE.
2. Following the receipt of the request, the PROCESSING APPLICATION WOULD GENERATE A DOCUMENT WHICH WOULD BE RETURNED AS THE PAYLOAD OF THE RESPONSE MESSAGE with appropiate status codes. If for whatever reason, the request message was not received or processed by the intended business application, suitable status messages would be generated by the underlying transport layer and reported to the SOAP Sender.

Figure 4 Request/Response using SOAP headers
If the underlying transport protocol DOES NOT SUPPORT A REQUEST/RESPONSE MODEL, then the configuration shown in Figure 4 may be appropriate. 
EXAMPLES OF SUCH AN UNDERLYING PROTOCOL may include UNIDIRECTIONAL QUEUING MIDDLEWARE. 
In this case, message identification and correlation is provided by SOAP HEADERS. 
1.In the request SOAP message, a MESSAGE IDENTIFIER HANDLER is responsible for generating A UNIQUE MESSAGE IDENTIFIER AND INSERTING IT INTO A SOAP HEADER. This forms part of the SOAP request message and is sent from SOAP Application 1 to the receiving SOAP Application 2. 
2.The REQUEST MESSAGE IS PROCESSED by a business application and a response message is assembled. This INCLUDES A SOAP HEADER BUILT BY A MESSAGE CORRELATION HANDLER which links the response message to its associated request.

Example 2: SOAP request message CONTAINING A MESSAGE IDENTIFIER
<?xml version="1.0" ?>
<env:Envelope xmlns:env="http://www.w3.org/2001/09/soap-envelope">
  <env:Header>
    <n:MsgHeader xmlns:n="http://example.org/requestresponse">
      <n:MessageId>uuid:09233523-345b-4351-b623-5dsf35sgs5d6</n:MessageId>
    </n:MsgHeader>
  </env:Header>
  <env:Body>
      ........
  </env:Body>
</env:Envelope>
Example 3: SOAP response message containing correlation to original request
<?xml version="1.0" ?>
<env:Envelope xmlns:env="http://www.w3.org/2001/09/soap-envelope">
  <env:Header>
    <n:MsgHeader xmlns:n="http://example.org/requestresponse">
      <n:MessageId>uuid:09233523-567b-2891-b623-9dke28yod7m9</n:MessageId>
      <n:ResponseTo>uuid:09233523-345b-4351-b623-5dsf35sgs5d6</n:ResponseTo>
    </n:MsgHeader>
  </env:Header>
  <env:Body>
      ........
  </env:Body>
</env:Envelope>


;;xxx IS THIS IS MY MOST LIKELY CASE FOR SHAQ, ETC??
2.4 S4 REMOTE PROCEDURE CALL (RPC)

2.4.1 Scenario Definition

The sender invokes the service by passing parameters that are serialized into a message for transmission to the receiving server.

2.4.2 Description

Scenario S4 differs from scenario S3 in that the request message CONSISTS OF A SET OF SERIALIZED PARAMETERS USED TO INVOKE SOME REMOTE PROCEDURE which responds with a set of results. This is a different programming model to the document exchange one illustrated by scenario S3. Scenario S4 requires a request/response mechanism as in S3, with the parameter and result serialization needed for the RPC programming model form the SOAP Body element.

Figure 5 RPC using underlying transport
Figure 5 illustrates an RPC invocation over an underlying transport protocol such as HTTP that supports request/response. In this case, no additional headers are needed to correlate the request and response messages. Example request and response SOAP messages are:

Example 4: SOAP RPC REQUEST MESSAGE
<?xml version="1.0" ?>
<env:Envelope xmlns:env="http://www.w3.org/2001/09/soap-envelope">
  <env:Body>
    <r:GetLastTradePrice env:encodingStyle="http://www.w3.org/2001/09/soap-encoding"
                            xmlns:r="http://example.org/2001/06/quotes">
      <r:Symbol>DEF</r:Symbol>
    </r:GetLastTradePrice>
  </env:Body>
</env:Envelope>

Example 5: SOAP RPC RESPONSE MESSAGE
<?xml version="1.0" ?>
<env:Envelope xmlns:env="http://www.w3.org/2001/09/soap-envelope">
  <env:Body>
    <r:GetLastTradePriceResponse env:encodingStyle="http://www.w3.org/2001/09/soap-encoding"
                            xmlns:r="http://example.org/2001/06/quotes"
                            xmlns:rpc="http://www.w3.org/2001/09/soap-rpc">
      <rpc:Result>34.5</rpc:Result>
    </r:GetLastTradePriceResponse>
  </env:Body>
</env:Envelope>
|#
#|
In Figure 6, the underlying TRANSPORT PROTOCOL DOES NOT SUPPORT REQUEST/RESPONSE DIRECTLY. The RPC request and response elements again form the Body of the SOAP messages. Correlation of the request and response is provided by the Message Identifier and Message Correlation handlers as described in scenario S3.

Example 6: SOAP RPC request message with message identification
<?xml version="1.0" ?>
<env:Envelope xmlns:env="http://www.w3.org/2001/09/soap-envelope">
  <env:Header>
    <n:MsgHeader xmlns:n="http://example.org/requestresponse">
      <n:MessageId>uuid:09233523-345b-4351-b623-5dsf35sgs5d6</n:MessageId>
    </n:MsgHeader>
  </env:Header>
  <env:Body>
    <r:GetLastTradePrice env:encodingStyle="http://www.w3.org/2001/09/soap-encoding"
                            xmlns:r="http://example.org/2001/06/quotes">
      <r:Symbol>DEF</r:Symbol>
    </r:GetLastTradePrice>
  </env:Body>
</env:Envelope>
Example 7: SOAP RPC response message containing correlation to original request
<?xml version="1.0" ?>
<env:Envelope xmlns:env="http://www.w3.org/2001/09/soap-envelope">
  <env:Header>
    <n:MsgHeader xmlns:n="http://example.org/requestresponse">
      <n:MessageId>uuid:09233523-567b-2891-b623-9dke28yod7m9</n:MessageId>
      <n:ResponseTo>uuid:09233523-345b-4351-b623-5dsf35sgs5d6</n:ResponseTo>
    </n:MsgHeader>
  </env:Header>
  <env:Body>        
    <r:GetLastTradePriceResponse env:encodingStyle="http://www.w3.org/2001/09/soap-encoding"
                                    xmlns:r="http://example.org/2001/06/quotes"
                                    xmlns:rpc="http://www.w3.org/2001/09/soap-rpc">
      <rpc:Result>34.5</rpc:Result>
    </r:GetLastTradePriceResponse>
  </env:Body>
</env:Envelope>
2.5 S5 Request with acknowledgement

2.5.1 Scenario Definition

A sender wishes to reliably exchange data with a receiver. It wishes to be notified of the status of the data delivery to the receiver. The status may take the form of:

The data has been successfully delivered to the receiver, or

Some failure has occurred which prevents the successful delivery to the receiver.

2.5.2 Description

Figure 7 Request with acknowledgement
Figure 7 illustrates a request/response scenario with the SOAP Sender requesting status information from the matching SOAP Receiver. This status may provide delivery information to the sender in addition to other business related responses that the receiving application may generate. Figure 7 assumes that the underlying transport protocol supports the request/response exchange model. A Status Handler is registered with the SOAP Sender and configured to request the status information. A matching handler on the SOAP Receiver generates the requested status information and places it in the response message which is then returned to the originating SOAP Sender.

In the example SOAP messages below, a StatusRequest header element includes an identifier for the message being sent. The inclusion of the StatusRequest header results in the receiving SOAP processor including a StatusResponse Header in the response. This includes information about the delivered message including an enumerated status and timestamp.

Example 8: SOAP request message with staus request header
<?xml version="1.0" ?>
<env:Envelope xmlns:env="http://www.w3.org/2001/09/soap-envelope">
  <env:Header>
    <n:StatusRequest xmlns:n="http://example.org/status">
      <n:MessageId>uuid:09233523-345b-4351-b623-5dsf35sgs5d6</n:MessageId>
    </n:StatusRequest>
  </env:Header>
  <env:Body>
    -----
  </env:Body>
</env:Envelope>
Example 9: SOAP response message containing delivery status for request
<?xml version="1.0" ?>
<env:Envelope xmlns:env="http://www.w3.org/2001/09/soap-envelope">
  <env:Header>
    <n:StatusResponse xmlns:n="http://example.org/status">
      <n:MessageId>uuid:09233523-567b-2891-b623-9dke28yod7m9</n:MessageId>
      <n:MessageStatus>DELIVERED</n:MessageStatus>
      <n:Timestamp>2001-03-09T12:22:30Z</n:Timestamp>
    </n:StatusResponse>
  </env:Header>
  <env:Body>        
    -----
  </env:Body>
</env:Envelope>
2.6 S6 Request with encrypted payload

2.6.1 Scenario Definition

A sender wishes to exchange data with a receiver and has agreed to encrypt the payload. The sending and receiving applications agree on the encryption methodology. Data is encrypted by the originating application and sent to the receiver via SOAP. The data reaches the receiving application untouched, and may then be decrypted in the agreed-upon manner.

2.6.2 Description

Figure 8 Request with encrypted payload
Scenario S6 describes two applications that wish to share encrypted data as an opaque body in a SOAP message. It places no requirements on the SOAP messaging layer. Figure 8 illustrates this scenario.

Example 10: Plaintext SOAP message
<?xml version="1.0" ?>
<env:Envelope xmlns:env="http://www.w3.org/2001/09/soap-envelope">
  <env:Body>
    <m:GetLastTradePrice xmln:m="some-URI">
      <m:symbol>IBM</m:symbol>
    </m:GetLastTradePrice>
  </env:Body>
</env:Envelope>
The following is the encrypted version of the above plain SOAP message. The body entry <m:GetLastTradePrice> is encrypted using a symmetric key identified by the key name "Symmetric Key" and replaced by the <xenc:EncryptedData> element with an id "encrypted-body-entry". A <sec:Encryption> header entry for this encrypted data is added to the SOAP header. Note that the <sec:EncryptedDataList> element in the header entry has a reference to the <xenc:EncryptedData> element. The symmetric key used for encryption is stored in the <xenc:EncryptedKey> element in the header entry in an encrypted form, that is, it is encrypted by John Smith's RSA public key.

Example 11: Encrypted SOAP message
<?xml version="1.0" ?>
<env:Envelope xmlns:env="http://www.w3.org/2001/09/soap-envelope">
  <env:Header>
    <sec:Encryption xmlns:sec="http://schemas.xmlsoap.org/soap/security/2000-12"
                       env:actor="some-URI"
                       env:mustUnderstand="true">
      <sec:EncryptedDataList>
        <sec:EncryptedDataReference URI="#encrypted-body-entry"/>
      </sec:EncryptedDataList>
      <xenc:EncryptedKey xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"
                            Id="EK"
                            CarriedKeyName="Symmetric Key"
                            Recipient="John Smith">
        <xenc:EncryptionMethod Algorithm="http://www.w3.org/2001/04/xmlenc#rsa-1_5"/>
        <ds:KeyInfo xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
          <ds:KeyName>John Smith's RSA Key</ds:KeyName>
        </ds:KeyInfo>
        <xenc:CipherData>
          <xenc:CipherValue>ENCRYPTED 3DES KEY......</xenc:CipherValue>
        </xenc:CipherData>        
        <xenc:ReferenceList>
          <xenc:DataReference URI="#encrypted-body-entry"/>
        </xenc:ReferenceList>
      </xenc:EncryptedKey>
    </sec:Encryption>
  </env:Header>
  <env:Body>
    <xenc:EncryptedData xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"
                           Id="encrypted-body-entry"
                           Type="http://www.w3.org/2001/04/xmlenc#Element">
    <xenc:EncryptionMethod Algorithm="http://www.w3.org/2001/04/xmlenc#tripledes-cbc"/>
      <ds:KeyInfo xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
        <ds:RetrievalMethod URI="#EK" Type="http://www.w3.org/2001/04/xmlenc#EncryptedKey"/>
        <ds:KeyName>Symmetric Key</ds:KeyName>
      </ds:KeyInfo>
      <xenc:CipherData>
        <xenc:CipherValue>ENCRYPTED BODY ENTRY......</xenc:CipherValue>
      </xenc:CipherData>        
    </xenc:EncryptedData>
  </env:Body>
</env:Envelope>
2.7 S7 Third party intermediary

2.7.1 Scenario Definition

A blind auction marketplace serves as a broker between buyers and suppliers. Buyers submit their requirements to the marketplace hub, which broadcasts this information to multiple suppliers. Suppliers respond to the marketplace hub where the information is logged and ultimately delivered to the buyer.

2.7.2 Description  GO TO ORIGINAL DOC FOR MORE INFO
|#
